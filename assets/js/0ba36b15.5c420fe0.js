"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([[7657],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=a,g=d["".concat(s,".").concat(c)]||d[c]||m[c]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},63606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"bind",title:"\ud83d\udcce Bind",description:"Binds the request and response items to a struct.",sidebar_position:4,toc_max_heading_level:4},i=void 0,l={unversionedId:"api/bind",id:"api/bind",title:"\ud83d\udcce Bind",description:"Binds the request and response items to a struct.",source:"@site/docs/core/api/bind.md",sourceDirName:"api",slug:"/api/bind",permalink:"/next/api/bind",draft:!1,editUrl:"https://github.com/gofiber/fiber/edit/master/docs/api/bind.md",tags:[],version:"current",lastUpdatedAt:1713374897,formattedLastUpdatedAt:"Apr 17, 2024",sidebarPosition:4,frontMatter:{id:"bind",title:"\ud83d\udcce Bind",description:"Binds the request and response items to a struct.",sidebar_position:4,toc_max_heading_level:4},sidebar:"tutorialSidebar",previous:{title:"\ud83e\udde0 Ctx",permalink:"/next/api/ctx"},next:{title:"\ud83d\udccb Constants",permalink:"/next/api/constants"}},s={},p=[{value:"Binders",id:"binders",level:2},{value:"Body",id:"body",level:3},{value:"Form",id:"form",level:4},{value:"JSON",id:"json",level:4},{value:"MultipartForm",id:"multipartform",level:4},{value:"XML",id:"xml",level:4},{value:"Cookie",id:"cookie",level:3},{value:"Header",id:"header",level:3},{value:"Query",id:"query",level:3},{value:"RespHeader",id:"respheader",level:3},{value:"URI",id:"uri",level:3},{value:"Custom",id:"custom",level:2},{value:"Options",id:"options",level:2},{value:"Must",id:"must",level:3},{value:"Should",id:"should",level:3},{value:"SetParserDecoder",id:"setparserdecoder",level:2},{value:"Validation",id:"validation",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Bindings are used to parse the request/response body, query parameters, cookies and much more into a struct."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"All binder returned value are only valid within the handler. Do not store any references.",(0,a.kt)("br",{parentName:"p"}),"\n","Make copies or use the ",(0,a.kt)("a",{parentName:"p",href:"/next/api/ctx"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"Immutable")))," setting instead. ",(0,a.kt)("a",{parentName:"p",href:"../#zero-allocation"},"Read more..."))),(0,a.kt)("h2",{id:"binders"},"Binders"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#body"},"Body"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#form"},"Form")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#json"},"JSON")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#multipartform"},"MultipartForm")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#xml"},"XML")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#cookie"},"Cookie")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#header"},"Header")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#query"},"Query")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#respheader"},"RespHeader")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#uri"},"URI"))),(0,a.kt)("h3",{id:"body"},"Body"),(0,a.kt)("p",null,"Binds the request body to a struct."),(0,a.kt)("p",null,"It is important to specify the correct struct tag based on the content type to be parsed. For example, if you want to parse a JSON body with a field called Pass, you would use a struct field of ",(0,a.kt)("inlineCode",{parentName:"p"},'json:"pass"'),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"content-type"),(0,a.kt)("th",{parentName:"tr",align:null},"struct tag"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"application/x-www-form-urlencoded")),(0,a.kt)("td",{parentName:"tr",align:null},"form")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"multipart/form-data")),(0,a.kt)("td",{parentName:"tr",align:null},"form")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"application/json")),(0,a.kt)("td",{parentName:"tr",align:null},"json")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"application/xml")),(0,a.kt)("td",{parentName:"tr",align:null},"xml")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"text/xml")),(0,a.kt)("td",{parentName:"tr",align:null},"xml")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Body(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name string `json:"name" xml:"name" form:"name"`\n    Pass string `json:"pass" xml:"pass" form:"pass"`\n}\n\napp.Post("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().Body(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name) // john\n    log.Println(p.Pass) // doe\n    \n    // ...\n})\n\n// Run tests with the following curl commands\n\n// curl -X POST -H "Content-Type: application/json" --data "{\\"name\\":\\"john\\",\\"pass\\":\\"doe\\"}" localhost:3000\n\n// curl -X POST -H "Content-Type: application/xml" --data "<login><name>john</name><pass>doe</pass></login>" localhost:3000\n\n// curl -X POST -H "Content-Type: application/x-www-form-urlencoded" --data "name=john&pass=doe" localhost:3000\n\n// curl -X POST -F name=john -F pass=doe http://localhost:3000\n\n// curl -X POST "http://localhost:3000/?name=john&pass=doe"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The methods for the various bodies can also be used directly:")),(0,a.kt)("h4",{id:"form"},"Form"),(0,a.kt)("p",null,"Binds the request form body to a struct."),(0,a.kt)("p",null,"It is important to specify the correct struct tag based on the content type to be parsed. For example, if you want to parse a Form body with a field called Pass, you would use a struct field of ",(0,a.kt)("inlineCode",{parentName:"p"},'form:"pass"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Form(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name string `form:"name"`\n    Pass string `form:"pass"`\n}\n\napp.Post("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().Form(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name) // john\n    log.Println(p.Pass) // doe\n    \n    // ...\n})\n\n// Run tests with the following curl commands\n\n// curl -X POST -H "Content-Type: application/x-www-form-urlencoded" --data "name=john&pass=doe" localhost:3000\n')),(0,a.kt)("h4",{id:"json"},"JSON"),(0,a.kt)("p",null,"Binds the request json body to a struct."),(0,a.kt)("p",null,"It is important to specify the correct struct tag based on the content type to be parsed. For example, if you want to parse a JSON body with a field called Pass, you would use a struct field of ",(0,a.kt)("inlineCode",{parentName:"p"},'json:"pass"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) JSON(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name string `json:"name"`\n    Pass string `json:"pass"`\n}\n\napp.Post("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().JSON(p); err != nil {\n        return err\n    }\n\n    log.Println(p.Name) // john\n    log.Println(p.Pass) // doe\n    \n    // ...\n})\n\n// Run tests with the following curl commands\n\n// curl -X POST -H "Content-Type: application/json" --data "{\\"name\\":\\"john\\",\\"pass\\":\\"doe\\"}" localhost:3000\n\n')),(0,a.kt)("h4",{id:"multipartform"},"MultipartForm"),(0,a.kt)("p",null,"Binds the request multipart form body to a struct."),(0,a.kt)("p",null,"It is important to specify the correct struct tag based on the content type to be parsed. For example, if you want to parse a MultipartForm body with a field called Pass, you would use a struct field of ",(0,a.kt)("inlineCode",{parentName:"p"},'form:"pass"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) MultipartForm(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name string `form:"name"`\n    Pass string `form:"pass"`\n}\n\napp.Post("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().MultipartForm(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name) // john\n    log.Println(p.Pass) // doe\n    \n    // ...\n})\n\n// Run tests with the following curl commands\n\n// curl -X POST -H "Content-Type: multipart/form-data" -F "name=john" -F "pass=doe" localhost:3000\n\n')),(0,a.kt)("h4",{id:"xml"},"XML"),(0,a.kt)("p",null,"Binds the request xml form body to a struct."),(0,a.kt)("p",null,"It is important to specify the correct struct tag based on the content type to be parsed. For example, if you want to parse a XML body with a field called Pass, you would use a struct field of ",(0,a.kt)("inlineCode",{parentName:"p"},'xml:"pass"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) XML(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name string `xml:"name"`\n    Pass string `xml:"pass"`\n}\n\napp.Post("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().XML(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name) // john\n    log.Println(p.Pass) // doe\n    \n    // ...\n})\n\n// Run tests with the following curl commands\n\n// curl -X POST -H "Content-Type: application/xml" --data "<login><name>john</name><pass>doe</pass></login>" localhost:3000\n')),(0,a.kt)("h3",{id:"cookie"},"Cookie"),(0,a.kt)("p",null,"This method is similar to ",(0,a.kt)("a",{parentName:"p",href:"#body"},"Body-Binding"),', but for cookie parameters.\nIt is important to use the struct tag "cookie". For example, if you want to parse a cookie with a field called Age, you would use a struct field of ',(0,a.kt)("inlineCode",{parentName:"p"},'cookie:"age"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Cookie(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name     string  `cookie:"name"`\n    Age      int     `cookie:"age"`\n    Job      bool    `cookie:"job"`\n}\n\napp.Get("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().Cookie(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name)     // Joseph\n    log.Println(p.Age)      // 23\n    log.Println(p.Job)      // true\n})\n// Run tests with the following curl command\n// curl.exe --cookie "name=Joseph; age=23; job=true" http://localhost:8000/\n')),(0,a.kt)("h3",{id:"header"},"Header"),(0,a.kt)("p",null,"This method is similar to ",(0,a.kt)("a",{parentName:"p",href:"#body"},"Body-Binding"),', but for request headers.\nIt is important to use the struct tag "header". For example, if you want to parse a request header with a field called Pass, you would use a struct field of ',(0,a.kt)("inlineCode",{parentName:"p"},'header:"pass"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Header(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name     string     `header:"name"`\n    Pass     string     `header:"pass"`\n    Products []string   `header:"products"`\n}\n\napp.Get("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().Header(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name)     // john\n    log.Println(p.Pass)     // doe\n    log.Println(p.Products) // [shoe, hat]\n    \n    // ...\n})\n// Run tests with the following curl command\n\n// curl "http://localhost:3000/" -H "name: john" -H "pass: doe" -H "products: shoe,hat"\n')),(0,a.kt)("h3",{id:"query"},"Query"),(0,a.kt)("p",null,"This method is similar to ",(0,a.kt)("a",{parentName:"p",href:"#body"},"Body-Binding"),', but for query parameters.\nIt is important to use the struct tag "query". For example, if you want to parse a query parameter with a field called Pass, you would use a struct field of ',(0,a.kt)("inlineCode",{parentName:"p"},'query:"pass"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Query(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name     string     `query:"name"`\n    Pass     string     `query:"pass"`\n    Products []string   `query:"products"`\n}\n\napp.Get("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().Query(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name)        // john\n    log.Println(p.Pass)        // doe\n    // fiber.Config{EnableSplittingOnParsers: false} - default\n    log.Println(p.Products)    // ["shoe,hat"]\n    // fiber.Config{EnableSplittingOnParsers: true}\n    // log.Println(p.Products) // ["shoe", "hat"]\n    \n    \n    // ...\n})\n// Run tests with the following curl command\n\n// curl "http://localhost:3000/?name=john&pass=doe&products=shoe,hat"\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For more parser settings please look here ",(0,a.kt)("a",{parentName:"p",href:"/next/api/fiber#config"},"Config"))),(0,a.kt)("h3",{id:"respheader"},"RespHeader"),(0,a.kt)("p",null,"This method is similar to ",(0,a.kt)("a",{parentName:"p",href:"#body"},"Body-Binding"),', but for response headers.\nIt is important to use the struct tag "respHeader". For example, if you want to parse a request header with a field called Pass, you would use a struct field of ',(0,a.kt)("inlineCode",{parentName:"p"},'respHeader:"pass"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Header(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// Field names should start with an uppercase letter\ntype Person struct {\n    Name     string     `respHeader:"name"`\n    Pass     string     `respHeader:"pass"`\n    Products []string   `respHeader:"products"`\n}\n\napp.Get("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().RespHeader(p); err != nil {\n        return err\n    }\n    \n    log.Println(p.Name)     // john\n    log.Println(p.Pass)     // doe\n    log.Println(p.Products) // [shoe, hat]\n    \n    // ...\n})\n// Run tests with the following curl command\n\n// curl "http://localhost:3000/" -H "name: john" -H "pass: doe" -H "products: shoe,hat"\n')),(0,a.kt)("h3",{id:"uri"},"URI"),(0,a.kt)("p",null,"This method is similar to ",(0,a.kt)("a",{parentName:"p",href:"#body"},"Body-Binding"),', but for path parameters. It is important to use the struct tag "uri". For example, if you want to parse a path parameter with a field called Pass, you would use a struct field of uri:"pass"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) URI(out any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'// GET http://example.com/user/111\napp.Get("/user/:id", func(c fiber.Ctx) error {\n    param := struct {ID uint `uri:"id"`}{}\n    \n    c.Bind().URI(&param) // "{"id": 111}"\n    \n    // ...\n})\n\n')),(0,a.kt)("h2",{id:"custom"},"Custom"),(0,a.kt)("p",null,"To use custom binders, you have to use this method."),(0,a.kt)("p",null,"You can register them from ",(0,a.kt)("a",{parentName:"p",href:"/next/api/app#registercustombinder"},"RegisterCustomBinder")," method of Fiber instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Custom(name string, dest any) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'app := fiber.New()\n\n// My custom binder\ncustomBinder := &customBinder{}\n// Name of custom binder, which will be used as Bind().Custom("name")\nfunc (*customBinder) Name() string {\n    return "custom"\n}\n// Is used in the Body Bind method to check if the binder should be used for custom mime types\nfunc (*customBinder) MIMETypes() []string {\n    return []string{"application/yaml"}\n}\n// Parse the body and bind it to the out interface\nfunc (*customBinder) Parse(c Ctx, out any) error {\n    // parse yaml body\n    return yaml.Unmarshal(c.Body(), out)\n}\n// Register custom binder\napp.RegisterCustomBinder(customBinder)\n\n// curl -X POST http://localhost:3000/custom -H "Content-Type: application/yaml" -d "name: John"\napp.Post("/custom", func(c Ctx) error {\n    var user User\n    // output: {Name:John}\n    // Custom binder is used by the name\n    if err := c.Bind().Custom("custom", &user); err != nil {\n        return err\n    }\n    // ...\n    return c.JSON(user)\n})\n')),(0,a.kt)("p",null,"Internally they are also used in the ",(0,a.kt)("a",{parentName:"p",href:"#body"},"Body")," method.\nFor this the MIMETypes method is used to check if the custom binder should be used for the given content type."),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"For more control over the error handling, you can use the following methods."),(0,a.kt)("h3",{id:"must"},"Must"),(0,a.kt)("p",null,"If you want to handle binder errors automatically, you can use Must.\nIf there's an error it'll return error and 400 as HTTP status."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Must() *Bind\n")),(0,a.kt)("h3",{id:"should"},"Should"),(0,a.kt)("p",null,"To handle binder errors manually, you can prefer Should method.\nIt's default behavior of binder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func (b *Bind) Should() *Bind\n")),(0,a.kt)("h2",{id:"setparserdecoder"},"SetParserDecoder"),(0,a.kt)("p",null,"Allow you to config BodyParser/QueryParser decoder, base on schema's options, providing possibility to add custom type for parsing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Signature"',title:'"Signature"'},"func SetParserDecoder(parserConfig fiber.ParserConfig{\n    IgnoreUnknownKeys bool,\n    ParserType        []fiber.ParserType{\n        Customtype any,\n        Converter  func(string) reflect.Value,\n    },\n    ZeroEmpty         bool,\n    SetAliasTag       string,\n})\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'\ntype CustomTime time.Time\n\n// String() returns the time in string\nfunc (ct *CustomTime) String() string {\n    t := time.Time(*ct).String()\n        return t\n    }\n    \n    // Register the converter for CustomTime type format as 2006-01-02\n    var timeConverter = func(value string) reflect.Value {\n    fmt.Println("timeConverter", value)\n    if v, err := time.Parse("2006-01-02", value); err == nil {\n        return reflect.ValueOf(v)\n    }\n    return reflect.Value{}\n}\n\ncustomTime := fiber.ParserType{\n    Customtype: CustomTime{},\n    Converter:  timeConverter,\n}\n\n// Add setting to the Decoder\nfiber.SetParserDecoder(fiber.ParserConfig{\n    IgnoreUnknownKeys: true,\n    ParserType:        []fiber.ParserType{customTime},\n    ZeroEmpty:         true,\n})\n\n// Example to use CustomType, you pause custom time format not in RFC3339\ntype Demo struct {\n    Date  CustomTime `form:"date" query:"date"`\n    Title string     `form:"title" query:"title"`\n    Body  string     `form:"body" query:"body"`\n}\n\napp.Post("/body", func(c fiber.Ctx) error {\n    var d Demo\n    c.BodyParser(&d)\n    fmt.Println("d.Date", d.Date.String())\n    return c.JSON(d)\n})\n\napp.Get("/query", func(c fiber.Ctx) error {\n    var d Demo\n    c.QueryParser(&d)\n    fmt.Println("d.Date", d.Date.String())\n    return c.JSON(d)\n})\n\n// curl -X POST -F title=title -F body=body -F date=2021-10-20 http://localhost:3000/body\n\n// curl -X GET "http://localhost:3000/query?title=title&body=body&date=2021-10-20"\n\n')),(0,a.kt)("h2",{id:"validation"},"Validation"),(0,a.kt)("p",null,"Validation is also possible with the binding methods. You can specify your validation rules using the ",(0,a.kt)("inlineCode",{parentName:"p"},"validate")," struct tag."),(0,a.kt)("p",null,"Specify your struct validator in the ",(0,a.kt)("a",{parentName:"p",href:"/next/api/fiber#config"},"config")),(0,a.kt)("p",null,"Setup your validator in the config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'import "github.com/go-playground/validator/v10"\n\ntype structValidator struct {\n    validate *validator.Validate\n}\n\n// Validator needs to implement the Validate method\nfunc (v *structValidator) Validate(out any) error {\n    return v.validate.Struct(out)\n}\n\n// Setup your validator in the config\napp := fiber.New(fiber.Config{\n    StructValidator: &structValidator{validate: validator.New()},\n})\n')),(0,a.kt)("p",null,"Usage of the validation in the binding methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example"',title:'"Example"'},'type Person struct {\n    Name string `json:"name" validate:"required"`\n    Age  int    `json:"age" validate:"gte=18,lte=60"`\n}\n\napp.Post("/", func(c fiber.Ctx) error {\n    p := new(Person)\n    \n    if err := c.Bind().JSON(p); err != nil {// <- here you receive the validation errors\n        return err\n    }\n})\n')))}m.isMDXComponent=!0}}]);